#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'yaml'
require "active_support/core_ext/hash/indifferent_access"
require "active_support/core_ext/hash/deep_merge"
require "active_support/core_ext/object/deep_dup"

# represents the whole archecture of Exercism (every possible service)
# loaded from a single large Docker Compose file
class Architecture
  def initialize(compose_data)
    @compose_data = compose_data.with_indifferent_access
  end

  def services
    @compose_data[:services].to_h { |name, data| [name, Service.new(name, data)] }
  end

  def version
    @compose_data[:version]
  end
end

# represents a single Docker service that from the architecture and allows
# configuring it with custom configuration
class Service
  DEFAULTS = { "build" => false }.with_indifferent_access

  attr_reader :data

  def initialize(name, data)
    @name = name
    @data = data.deep_dup
  end

  def dependencies
    @data[:depends_on] || []
  end

  def override(settings)
    settings = settings.reverse_merge(DEFAULTS)

    # remove build from the final YAML if it's not requested
    @data.delete :build if image? && settings[:build] == false
    # `build` might be a hash which will be deep merged
    without_build_boolean = settings.reject { |k, v| k == "build" && [true, false].include?(v)}
    @data.deep_merge!(without_build_boolean)
  end

  def image?
    @data[:image]
  end
end

# represents the stack we wish to build as configued from the stack.yml file
class Stack
  REQUIRED_SERVICES = ["startup"].freeze

  def initialize(stack, using:)
    @architecture = using
    @stack = stack.with_indifferent_access
    @data = { "version" => @architecture.version }.with_indifferent_access
  end

  def enabled_services
    list = @stack[:services].keys.map { |name| resolve_group(name) }.flatten
    list.prepend(*REQUIRED_SERVICES)
    list.uniq
  end

  def resolve_group(name)
    if @stack[:groups].key?(name)
      @stack[:groups][name].map(&method(:resolve_group))
    else
      [name, resolve_dependencies(name)]
    end
  end

  def resolve_dependencies(name)
    @architecture.services[name].dependencies
  end

  def configuration_for(name)
    @stack[:configure][name] || {}
  end

  def add_service(name)
    service = @architecture.services[name]
    service.override(configuration_for(name))

    @data[:services][name] = service.data
  end

  def prepare
    @data["services"] = {}
    enabled_services.map(&method(:add_service))
  end

  def write_docker_compose
    prepare

    puts "Writing new docker-compose.yml with #{@data[:services].length} services."
    File.open("docker-compose.yml", "w") { |f| f.write @data.to_hash.to_yaml }
  end
end

build_full_stack = Architecture.new(YAML.load_file("./docker-compose-full.yml"))
Stack.new(YAML.load_file("./stack.yml"), using: build_full_stack)
  .write_docker_compose
