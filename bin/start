#!/bin/bash
set -eo pipefail

for arg in "$@"
do
    case $arg in
        -b|--build)
        BUILD=1
        shift
        ;;
        -p|--pull)
        PULL=1
        shift
        ;;
        -t|--tail)
        TAIL=1
        shift
        ;;
        *)
        echo "Unsupported argument: $arg"
        exit 1
        ;;
    esac
done

STARTED_ONCE=.started_once

function filterUp() {
    grep -E -v 'is up-to|--remove-orphans'
}

function testWebsiteConnection() {
	printf "GET / HTTP/1.1\r\nHost: localhost:3020\r\n\r\n" | nc -w 1 localhost 3020 | grep -c '<body>' || true
}

cat setup/src/exercism_logo.txt
echo

bundle check || bundle install

./bin/build_stack

if [ ! -z "$PULL" ]; then
    docker-compose pull
fi

if [ ! -z "$BUILD" ]; then
    docker-compose build
fi

# create them first, and let the disk cool off
docker-compose up --no-start 2>&1 | filterUp && sleep 1

# some delay to allow s3/dynamo/setup to write the config
if [ ! -f "$STARTED_ONCE" ]; then
    docker-compose up -d setup 2>&1 | filterUp

    echo -en "Waiting for pre-stack to boot [.....]\b\b\b\b\b\b"
    for i in {1..5}
    do
       sleep 1 && echo -n "*"
    done
    echo "]"
    # touch $STARTED_ONCE
fi

echo ""
echo "Starting stack with website running at http://localhost:3020..."
echo ""

# them spool them up, this is in an effort to reduce what is happening
# simultaneously and perhaps provide a more consistent startup experience

if [ ! -z "$TAIL" ]; then
    docker-compose up 2>&1 | filterUp
else
    docker-compose up -d 2>&1 | filterUp

    echo
    echo -en "Waiting for everything to spool up ..."

    for i in {1..60}
    do
        if [ ! $(testWebsiteConnection) -eq 0 ]; then
            break
        fi

        echo -n "."
    done

    echo
    echo "Website running at http://localhost:3020/"
fi
